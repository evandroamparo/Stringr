unit TestAtributoFormat;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, SysUtils, Generics.Collections, Classes, Contnrs, UStringr, RegExpr;

type
  // Test methods for class TAtributoFormat

  TestTAtributoFormat = class(TTestCase)
  strict private
    FAtributoFormat: TAtributoFormat;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestDataSemFormato;
    procedure TestDataComFormato;
    procedure TestHoraSemFormato;
    procedure TestHoraComFormato;
    procedure TestDataHoraSemFormato;
    procedure TestDataHoraComFormato;
  end;

implementation

procedure TestTAtributoFormat.SetUp;
begin
  FAtributoFormat := TAtributoFormat.Create;
  ReportMemoryLeaksOnShutdown := DebugHook <> 0;
end;

procedure TestTAtributoFormat.TearDown;
begin
  FAtributoFormat.Free;
  FAtributoFormat := nil;
end;

procedure TestTAtributoFormat.TestDataComFormato;
var
  ReturnValue: WideString;
  ValorParametro: TDateTime;
  Formato: WideString;
begin
  Formato := 'dd.mm.yyyy';
  ValorParametro := Date;
  FAtributoFormat.Valor := Formato;
  ReturnValue := FAtributoFormat.Transformar(ValorParametro);
  CheckEqualsWideString(FormatDateTime(Formato, ValorParametro), ReturnValue);
end;

procedure TestTAtributoFormat.TestDataHoraComFormato;
var
  ReturnValue: WideString;
  ValorParametro: TDateTime;
  Formato: WideString;
begin
  Formato := 'dd.mm.yyyy hh:nn:ss';
  ValorParametro := Now;
  FAtributoFormat.Valor := Formato;
  ReturnValue := FAtributoFormat.Transformar(ValorParametro);
  CheckEqualsWideString(FormatDateTime(Formato, ValorParametro), ReturnValue);
end;

procedure TestTAtributoFormat.TestDataHoraSemFormato;
var
  ReturnValue: WideString;
  ValorParametro: TDateTime;
begin
  ValorParametro := Now;
  FAtributoFormat.Valor := '';
  ReturnValue := FAtributoFormat.Transformar(ValorParametro);
  CheckEqualsWideString(DateTimeToStr(ValorParametro), ReturnValue);
end;

procedure TestTAtributoFormat.TestDataSemFormato;
var
  ReturnValue: WideString;
  ValorParametro: TDateTime;
begin
  ValorParametro := Date;
  FAtributoFormat.Valor := '';
  ReturnValue := FAtributoFormat.Transformar(ValorParametro);
  CheckEqualsWideString(DateToStr(ValorParametro), ReturnValue);
end;

procedure TestTAtributoFormat.TestHoraComFormato;
var
  ReturnValue: WideString;
  ValorParametro: TDateTime;
  Formato: WideString;
begin
  Formato := 'hh nn ss';
  ValorParametro := Time;
  FAtributoFormat.Valor := Formato;
  ReturnValue := FAtributoFormat.Transformar(ValorParametro);
  CheckEqualsWideString(FormatDateTime(Formato, ValorParametro), ReturnValue);
end;

procedure TestTAtributoFormat.TestHoraSemFormato;
var
  ReturnValue: WideString;
  ValorParametro: TDateTime;
begin
  ValorParametro := Time;
  FAtributoFormat.Valor := '';
  ReturnValue := FAtributoFormat.Transformar(ValorParametro);
  CheckEqualsWideString(TimeToStr(ValorParametro), ReturnValue);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTAtributoFormat.Suite);
end.

