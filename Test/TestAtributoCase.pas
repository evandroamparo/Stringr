unit TestAtributoCase;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, SysUtils, Generics.Collections, Classes, Contnrs, UStringr, RegExpr,
  UAtributoCase;

type
  // Test methods for class TAtributoCase

  TestTAtributoCase = class(TTestCase)
  strict private
    FAtributoCase: TAtributoCase;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestTransformarMaiusculas;
    procedure TestTransformarMinusculas;
    procedure TestSemTransformacao;
    //sem transformação
  end;

implementation

procedure TestTAtributoCase.SetUp;
begin
  FAtributoCase := TAtributoCase.Create;
end;

procedure TestTAtributoCase.TearDown;
begin
  FAtributoCase.Free;
  FAtributoCase := nil;
end;

procedure TestTAtributoCase.TestSemTransformacao;
var
  ReturnValue: WideString;
  ValorParametro: WideString;
begin
  ValorParametro := 'Teste';
  FAtributoCase.Valor := csNormal;
  ReturnValue := FAtributoCase.Transformar(ValorParametro);
  CheckEqualsWideString('Teste', ReturnValue);
end;

procedure TestTAtributoCase.TestTransformarMaiusculas;
var
  ReturnValue: WideString;
  ValorParametro: WideString;
begin
  ValorParametro := 'teste';
  FAtributoCase.Valor := csMaiusculas;
  ReturnValue := FAtributoCase.Transformar(ValorParametro);
  CheckEqualsWideString('TESTE', ReturnValue);
end;

procedure TestTAtributoCase.TestTransformarMinusculas;
var
  ReturnValue: WideString;
  ValorParametro: WideString;
begin
  ValorParametro := 'TESTE';
  FAtributoCase.Valor := csMinusculas;
  ReturnValue := FAtributoCase.Transformar(ValorParametro);
  CheckEqualsWideString('teste', ReturnValue);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTAtributoCase.Suite);
end.

