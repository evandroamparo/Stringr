unit TestUStringr;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, UStringr;

type
  // Test methods for class TStringr

  TestTStringr = class(TTestCase)
  strict private
    FStringr: TStringr;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestParametroSemRepeticao;
    procedure TestParametroComRepeticao;
    procedure TestDataSemFormato;
    procedure TestDataComFormato;
    procedure TestHoraSemFormato;
    procedure TestHoraComFormato;
    procedure TestDataHora;
    procedure TestUpperCase;
    procedure TestLowerCase;
    procedure TestParametroTruncado;
    procedure TestCaracterEscape;
  end;

implementation

uses
  SysUtils;

procedure TestTStringr.TestHoraComFormato;
var
  ReturnValue: string;
  Formato: string;
begin
  Formato := 'h "h" m "m" s "s"';
  FStringr := TStringr.Create('{Time format=''' + Formato + '''}');
  ReturnValue := FStringr.Render;
  CheckEquals(FormatDateTime(Formato, Time), ReturnValue);
end;

procedure TestTStringr.TestHoraSemFormato;
var
  ReturnValue: string;
begin
  FStringr := TStringr.Create('{Time}');
  ReturnValue := FStringr.Render;
  CheckEquals(TimeToStr(Time), ReturnValue);
end;

procedure TestTStringr.TestLowerCase;
var
  ReturnValue: string;
begin
  FStringr := TStringr.Create('Hello, {name case=lower}!');
  FStringr['name'] := 'WORLD';
  ReturnValue := FStringr.Render;
  CheckEquals('Hello, world!', ReturnValue);
end;

procedure TestTStringr.SetUp;
begin
end;

procedure TestTStringr.TearDown;
begin
end;

procedure TestTStringr.TestCaracterEscape;
var
  ReturnValue: string;
  FormatoOriginal, FormatoEquivalente: string;
begin
  FormatoOriginal := 'dd \''de\'' mmmm \''de\'' yyyy';
  FormatoEquivalente := 'dd ''de'' mmmm ''de'' yyyy';
  FStringr := TStringr.Create('{Date format=''' + FormatoOriginal + '''}');
  ReturnValue := FStringr.Render;
  CheckEquals(FormatDateTime(FormatoEquivalente, Date), ReturnValue);
end;

procedure TestTStringr.TestDataComFormato;
var
  ReturnValue: string;
  Formato: string;
begin
  Formato := 'dd-mm-yyyy';
  FStringr := TStringr.Create('{Date format=' + Formato + '}');
  ReturnValue := FStringr.Render;
  CheckEquals(FormatDateTime(Formato, Date), ReturnValue);
end;

procedure TestTStringr.TestDataSemFormato;
var
  ReturnValue: string;
begin
  FStringr := TStringr.Create('{Date}');
  ReturnValue := FStringr.Render;
  CheckEquals(DateToStr(Date), ReturnValue);
end;

procedure TestTStringr.TestDataHora;
var
  ReturnValue: string;
begin
  FStringr := TStringr.Create('{DateTime}');
  ReturnValue := FStringr.Render;
  CheckEquals(DateTimeToStr(Now), ReturnValue);
end;

procedure TestTStringr.TestParametroComRepeticao;
var
  ReturnValue: string;
begin
  FStringr := TStringr.Create('Hello, {name}! How are you, {name}?');
  FStringr['name'] := 'world';
  ReturnValue := FStringr.Render;
  CheckEquals('Hello, world! How are you, world?', ReturnValue);
end;

procedure TestTStringr.TestParametroSemRepeticao;
var
  ReturnValue: string;
begin
  FStringr := TStringr.Create('Hello, {name}!');
  FStringr['name'] := 'world';
  ReturnValue := FStringr.Render;
  CheckEquals('Hello, world!', ReturnValue);
end;

procedure TestTStringr.TestUpperCase;
var
  ReturnValue: string;
begin
  FStringr := TStringr.Create('Hello, {name case=upper}!');
  FStringr['name'] := 'world';
  ReturnValue := FStringr.Render;
  CheckEquals('Hello, WORLD!', ReturnValue);
end;

procedure TestTStringr.TestParametroTruncado;
var
  ReturnValue: string;
begin
  FStringr := TStringr.Create('Hello, {name length=3}!');
  FStringr['name'] := 'world';
  ReturnValue := FStringr.Render;
  CheckEquals('Hello, wor!', ReturnValue);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTStringr.Suite);
end.

