unit TestParser;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, SysUtils, Generics.Collections, Classes, Contnrs, UStringr, RegExpr,
  UDefaultParser;

type
  // Test methods for class TDefaultParser

  TestTDefaultParser = class(TTestCase)
  strict private
    FDefaultParser: TDefaultParser;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestTemplateVazio;
    procedure TestTemplateSemParametros;
    procedure TestTemplateComParametros;
    procedure TestDelimitadorPesonalizado;
    procedure TestTextoSeguidoDeParametro;
    procedure TestParametroSeguidoDeTexto;
  end;

implementation

uses
  UElemento, UParametro, UTexto;

procedure TestTDefaultParser.TestParametroSeguidoDeTexto;
var
  ReturnValue: TElemento;
begin
  FDefaultParser.Texto := '{parametro} Este é um texto.';

  CheckTrue(FDefaultParser.ContemElemento, 'Template não contém elemento.');

  ReturnValue := FDefaultParser.ProximoElemento;
  CheckIs(ReturnValue, TParametro, 'Elemento não é parâmetro.');
  CheckEquals(1, ReturnValue.PosicaoInicial, 'Posição inicial incorreta.');
  CheckEqualsWideString('{parametro}', ReturnValue.Texto, 'Texto incorreto.');

  CheckTrue(FDefaultParser.ContemElemento, 'Template não contém elemento.');
  ReturnValue := FDefaultParser.ProximoElemento;
  CheckIs(ReturnValue, TTexto, 'Elemento não é parâmetro.');
  CheckEquals(12, ReturnValue.PosicaoInicial, 'Posição inicial incorreta.');
  CheckEqualsWideString(' Este é um texto.', ReturnValue.Texto, 'Texto incorreto.');
end;

procedure TestTDefaultParser.SetUp;
begin
  FDefaultParser := TDefaultParser.Create;
end;

procedure TestTDefaultParser.TearDown;
begin
  FDefaultParser.Free;
end;

procedure TestTDefaultParser.TestDelimitadorPesonalizado;
var
  ReturnValue: TElemento;
begin
  FDefaultParser.Texto := '$teste$';
  FDefaultParser.DelimitadorInicio := '\$';
  FDefaultParser.DelimitadorFim := '\$';

  CheckTrue(FDefaultParser.ContemElemento, 'Template não contém elemento.');

  ReturnValue := FDefaultParser.ProximoElemento;
  CheckIs(ReturnValue, TParametro, 'Elemento não é parâmetro.');
  CheckEquals(1, ReturnValue.PosicaoInicial, 'Posição inicial incorreta.');
  CheckEqualsWideString('$teste$', ReturnValue.Texto, 'Texto incorreto.');
end;

procedure TestTDefaultParser.TestTemplateComParametros;
var
  ReturnValue: TElemento;
begin
  FDefaultParser.Texto := '{teste}';

  CheckTrue(FDefaultParser.ContemElemento, 'Template não contém elemento.');

  ReturnValue := FDefaultParser.ProximoElemento;
  CheckIs(ReturnValue, TParametro, 'Elemento não é parâmetro.');
  CheckEquals(1, ReturnValue.PosicaoInicial, 'Posição inicial incorreta.');
  CheckEqualsWideString('{teste}', ReturnValue.Texto, 'Texto incorreto.');
end;

procedure TestTDefaultParser.TestTemplateSemParametros;
var
  ReturnValue: TElemento;
begin
  FDefaultParser.Texto := 'teste';

  CheckTrue(FDefaultParser.ContemElemento, 'Template não contém elemento.');

  ReturnValue := FDefaultParser.ProximoElemento;
  CheckIs(ReturnValue, TTexto, 'Elemento não é texto.');
  CheckEquals(1, ReturnValue.PosicaoInicial, 'Posição inicial incorreta.');
  CheckEqualsWideString('teste', ReturnValue.ToString, 'Texto incorreto.');
end;

procedure TestTDefaultParser.TestTemplateVazio;
begin
  FDefaultParser.Texto := '';
  CheckFalse(FDefaultParser.ContemElemento, 'Template vazio contém elemento.');
  CheckNull(FDefaultParser.ProximoElemento, 'Próximo elemento não nulo.');
end;

procedure TestTDefaultParser.TestTextoSeguidoDeParametro;
var
  ReturnValue: TElemento;
begin
  FDefaultParser.Texto := 'Este é um texto. {parametro}';

  CheckTrue(FDefaultParser.ContemElemento, 'Template não contém elemento.');

  ReturnValue := FDefaultParser.ProximoElemento;
  CheckIs(ReturnValue, TTexto, 'Elemento não é texto.');
  CheckEquals(1, ReturnValue.PosicaoInicial, 'Posição inicial incorreta.');
  CheckEqualsWideString('Este é um texto. ', ReturnValue.Texto, 'Texto incorreto.');

  CheckTrue(FDefaultParser.ContemElemento, 'Template não contém elemento.');
  ReturnValue := FDefaultParser.ProximoElemento;
  CheckIs(ReturnValue, TParametro, 'Elemento não é parâmetro.');
  CheckEquals(18, ReturnValue.PosicaoInicial, 'Posição inicial incorreta.');
  CheckEqualsWideString('{parametro}', ReturnValue.Texto, 'Texto incorreto.');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTDefaultParser.Suite);
end.

